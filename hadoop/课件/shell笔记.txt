一、shell编程
1.要求
		复杂的脚本看懂大概，30%。简单的脚本会写！
		
2.shell编程怎么学
		①学习shell的语法和格式要求
		②使用shell的语法编写一个含有若干shell命令的脚本
		③使用shell命令解释器，执行shell脚本
		
3.shell是什么
	Linux操作系统的核心是kernal（内核）！
	当应用程序在执行时，需要调用计算机硬件的cpu,内存等资源！
	程序将指令发送给内核执行！
	为了防止程序发送一些恶意指令导致损坏内核，在内核和应用程序接口之间，设置一个中间层，称为shell!
	
	本质上来说：
		shell:  一个可以解释shell规定的语法命令的解释器！
				解释器负责将应用程序发送的指令，进行检查，合法后交给内核解释执行！返回结果！
						
		shell命令： shell解释器要求的指定语法编写的命令！
		
		shell脚本： 多条shell命令，可以编写在一个文件中，文件中的指令，可以按照顺序执行！
					将这个文件称为shell脚本！
						
4.shell中的解释器
	 使用 $SHELL变量查看当前系统默认的解释器类型！
	 
	 shell支持多种不同风格的解释器，通过/etc/shells文件查看！
	 
	 默认使用 /bin/bash作为shell命令解释器！
	 
	 在终端中输入： cat /etc/shells
	 等价于/bin/bash -c 'cat /etc/shells'.
	 默认/bin/bash必须接一个脚本，作为输入！如果是一条命令，需要加-c （command）
	 
5. linux中的常用目录
	/bin:     linux用户常用的命令
				cd 
				echo
				pwd
	/sbin（super user bin）: root用户(管理员)使用的常用命令！
				对整个机器的管理命令！
				开启网络服务：  service network start
			
6.命令的执行
	-bash: faefaw: command not found ： 当前命令不在当前用户的环境变量！

查看： echo $PATH

7.脚本的编写要求
①声明：  #!/bin/bash
②正文：  必须是shell解释器能否解释的命令

8.脚本的执行
	① bash /sh + 脚本
			特点： 新开一个bash执行脚本，一旦脚本执行完毕，bash自动关闭！
	② ./脚本，前提是当前用户对脚本有执行权限，使用当前默认的解释器执行脚本
			特点： 新开一个bash执行脚本，一旦脚本执行完毕，bash自动关闭！
    ③ source / .  +脚本  使用当前默认的解释器执行脚本，并不要求当前用户对脚本有执行权限
			特点： 在当前bash执行脚本
	
二、变量操作
1.基本操作

增：  变量名=变量值

删：  unset 变量名

改：  变量名=变量值

查：  echo  $变量名
	  查看当前bash所有定义的变量：  set
		
2.关键字
特殊关键字： 
		readonly : 用来修饰一个只读(不能修改，删除)变量！
		export:    导出！将一个变量提升为全局变量！
						局部变量： 默认变量只在定义变量的bash中有效！
									如果希望在bash-a访问bash-b中定义的变量！
										要求： ①bash-b不能关闭
											   ②让bash-b将变量提升为全局变量，才能访问到！
											   
注意：  ①变量赋值时，值全部以字符串存在，无法进行运算！
		②赋值的值中有空格，需要使用引号引起来
			单引号： 不能识别$等特殊字符,不能脱义
			双引号： 可以脱义$
		③``,作用是将引号中的命令执行的结果赋值给变量
			`命令` 等价于 $(命令)

											   
对象0X1234 B{String name="jack"}
对象A｛
	B b=0X1234
	void hello(){
		sysout(B.name)
	}

｝
		
3.变量的生命周期：
		在第一次新增时产生
		变量在执行unset时，撤销，失效！
		关闭当前bash，所有定义的变量也不会存在！

4.特殊变量
	$?:  上一条命令的返回值！在bash中，如果返回值为0，代表上一条命令执行成功！
	$#:  参数个数
	$*:  参数列表。在使用 "$*"时，将整个参数列表作为一个元素！
	$@:	 参数列表
	$0-n: $0:脚本名
		  $1-$n: 第n个参数，获取第10以上的参数，${n}







一、wc统计文件信息
	wc -l 文件	统计文件行数；
	wc -w 文件	统计文件单词数；
	wc -m 文件	统计文件字符数；
	wc -c 文件	统计文件字节数：英文字符一个字节，行末增加一个，中文三个字节；

二、cut在文件中剪切数据
	默认分隔符是'\t'
	cut -d ':' -f 1		使用':'分割，提取第一列
	cut -d:	-f 1,2,3,4
	cut -d	':' 1-4,8
	
三、sed流编辑器
	sed [选项参数] 'command'  filename
	sed '2a hello world' sed.txt			在第二行下新增hello world
	sed '/hello/d' sed.txt					删除文件中包含hello的行
	sed '2d' sed.txt						删除sed.txt文件第二行
	sed '$d' sed.txt						删除sed.txt文件最后一行
	sed '2,$d' sed.txt						删除sed.txt文件第二行至最后一行
	sed 's/wo/ni/g' sed.txt					将sed.txt文件中wo替换为ni
	sed -e '2d' -e 's/wo/ni/g' sed.txt		将sed.txt文件中的第二行删除并将wo替换为ni
		
		
三、awk文本分析工具
	awk [选项参数] 'pattern1{action1} pattern2{action2}...' filename
	F:	指定输入文件的分隔符，默认使用空格
	v:	定义一个变量
	
	print:  向屏幕输出内容
	$1-$n:  第n列
	
	BEGIN:  代表开始读取文件所遇内容之前，做什么事！ 初始化代码块
	END:    代表开始读取文件所有内容之后，做什么事！ 结束代码块
	
	FILENAME: 文件名
	NR: 读的当前行的行号
	NF：读的当前列的列号
	
	awk -F: '/^root/{print $7}' passwd			搜索passwd文件以root开头的所有行，并输出该行的第7列
	awk -F: '/^root/{print $1","$7}' passwd		中间以','号分割
	
	awk -F: 'BEGIN{print "user, shell"} {print $1","$7} END{print "hello,world"}' passwd
	
	awk -v i=1 -F: '{print $3+i}' passwd
	awk -v i=1 -F: '/zhangsan/{print $3+i}' passwd
	
	awk -F: '{print "filename:" FILENAME ",linenumber:" NR ",columns:" NF}' passwd
	
	ifconfig eth0 | grep "inet addr" | awk -F: '{print $2}' | awk -F " " '{print $1}'
	
	awk '/^$/{print NR}' sed.txt    查询sed.txt中空行所在的行号
	
	
	
四、sort默认使用第一个字符串的字典顺序排序
	-n	依照数值的大小排序，可以排字符串
	-r	以相反的顺序来排序
	-t	设置排序时所用的分隔字符，默认使用TAB
	-k	指定需要排序的列，sort -k 2 sort1.txt
	-u	u为unique的缩写，即如果出现相同的数据，只出现一行
	
	sort -nr -t : -k 4 /etc/passwd
	
	

命令补充：
	ifconfig eth0 | grep 'inet addr' ## 查看网卡1的IP lo:localhost
	netstat --help	
	ll | less
	netstat -tunlp  ##tunlp tu是TCP UDP n是数量 l监听 p程序

	ls -l | grep -i "searchword"  
		grep -i 'ubuntu' *.txt  ## 在txt中搜索Ubuntu忽略大小写
	-A n:显示匹配到的字符串所在的行及其后n行，after
	-B n:显示匹配到的字符串所在的行及其前n行，before
	-C n:显示匹配到的字符串所在的行及其前后各n行，context
	grep -C 2 -i "ZhangSan" name.txt
	grep -r "hello" /home  ## 递归查找

	xcall sudo yum -y install tree // xcall放在前面


	which service
	service network status // 向service传入两个参数
	/bin/bash -c 'cat /etc/shells' // -c告诉解释器后面是指令
	/bin：Linux常用命令：cd echo pwd
	/sbin (super user bin) :root用户的常用命令
	// command not found 当前命令不在当前用户的环境变量中
	sbin/nologin // 不能执行登录功能
	点测非空为true是否是空格？[   ] 不管多少空格都是false echo $? 返回1  直接[] 会报错


	查找某个文件所在路径的方法：
	find /opt/module/ -name hive-site.xml
	find /etc -name '*srm*' 
//	locate hive-site.xml

	jps -l 查看进程详细信息

	控制台执行：
	bash -c "ps -ef  | grep log-flume-kafka.conf | grep -v grep | awk  '{print \$2}' | xargs kill -9"

	cmd="ls"
	$cmd -al这样可以

	create database gmall if not exists gmall location 'hdfs://hadoop102:9000/warehouse/gmall' 

	date +%F -d "-2 day"		#显示前两天日期 2020-03-29
	:%s/2020-02-18/do_date/g   	#全局替换


	du -h plant_carbon.txt		#显示文件大小
	
	sed -i 's/  *//g' action.txt  # 删除action.txt中的空格，前面是两个空格！






						
		